
# coding: utf-8

# ---
# 
# _You are currently looking at **version 1.2** of this notebook. To download notebooks and datafiles, as well as get help on Jupyter notebooks in the Coursera platform, visit the [Jupyter Notebook FAQ](https://www.coursera.org/learn/python-social-network-analysis/resources/yPcBs) course resource._
# 
# ---

# # Assignment 4

# In[2]:


import networkx as nx
import pandas as pd
import numpy as np
import pickle


# ---
# 
# ## Part 1 - Random Graph Identification
# 
# For the first part of this assignment you will analyze randomly generated graphs and determine which algorithm created them.

# In[3]:


P1_Graphs = pickle.load(open('A4_graphs','rb'))
P1_Graphs


# <br>
# `P1_Graphs` is a list containing 5 networkx graphs. Each of these graphs were generated by one of three possible algorithms:
# * Preferential Attachment (`'PA'`)
# * Small World with low probability of rewiring (`'SW_L'`)
# * Small World with high probability of rewiring (`'SW_H'`)
# 
# Anaylze each of the 5 graphs and determine which of the three algorithms generated the graph.
# 
# *The `graph_identification` function should return a list of length 5 where each element in the list is either `'PA'`, `'SW_L'`, or `'SW_H'`.*

# In[10]:


def graph_identification():
    
    # Your Code Here
    methods=[]
    
    for g in P1_Graphs:
        degree_values = g.degree().values()
        histogram = [list(degree_values).count(i)/float(nx.number_of_nodes(g)) for i in sorted(set(degree_values))]
        if len(histogram)>10:
            methods.append('PA')
        elif nx.average_clustering(g)<0.1:
            methods.append('SW_H')
        else:
            methods.append('SW_L')
    return methods# Your Answer Here


# ---
# 
# ## Part 2 - Company Emails
# 
# For the second part of this assignment you will be workking with a company's email network where each node corresponds to a person at the company, and each edge indicates that at least one email has been sent between two people.
# 
# The network also contains the node attributes `Department` and `ManagementSalary`.
# 
# `Department` indicates the department in the company which the person belongs to, and `ManagementSalary` indicates whether that person is receiving a management position salary.

# In[5]:


G = nx.read_gpickle('email_prediction.txt')

print(nx.info(G))


# ### Part 2A - Salary Prediction
# 
# Using network `G`, identify the people in the network with missing values for the node attribute `ManagementSalary` and predict whether or not these individuals are receiving a management position salary.
# 
# To accomplish this, you will need to create a matrix of node features using networkx, train a sklearn classifier on nodes that have `ManagementSalary` data, and predict a probability of the node receiving a management salary for nodes where `ManagementSalary` is missing.
# 
# 
# 
# Your predictions will need to be given as the probability that the corresponding employee is receiving a management position salary.
# 
# The evaluation metric for this assignment is the Area Under the ROC Curve (AUC).
# 
# Your grade will be based on the AUC score computed for your classifier. A model which with an AUC of 0.88 or higher will receive full points, and with an AUC of 0.82 or higher will pass (get 80% of the full points).
# 
# Using your trained classifier, return a series of length 252 with the data being the probability of receiving management salary, and the index being the node id.
# 
#     Example:
#     
#         1       1.0
#         2       0.0
#         5       0.8
#         8       1.0
#             ...
#         996     0.7
#         1000    0.5
#         1001    0.0
#         Length: 252, dtype: float64

# In[19]:


import math
from sklearn.ensemble import RandomForestClassifier
from sklearn.neural_network import MLPClassifier
def salary_predictions():
    
    # Your Code Here
    #print(G.nodes(data=True))
    df = pd.DataFrame(index=G.nodes())
    df['Department']=pd.Series(nx.get_node_attributes(G,'Department'))
    df['HasManagementSalary']=pd.Series(nx.get_node_attributes(G,'ManagementSalary'))
    df['ClusteringCoefficient']=pd.Series(nx.clustering(G))
    df['Degree']=pd.Series(nx.degree(G))
    df['DegreeCentrality']=pd.Series(nx.degree_centrality(G))
    df['ClosenessCentrality']=pd.Series(nx.closeness_centrality(G, normalized=True))
    df['BetweennessCentrality']=pd.Series(nx.betweenness_centrality(G, normalized=True, endpoints=False))
    df['PageRank']=pd.Series(nx.pagerank(G))
    #all_nodes=G.nodes(data=True)
    #train_set=[n for n in all_nodes if not math.isnan(n[1]['ManagementSalary'])]
    #prediction_set=[n for n in all_nodes if math.isnan(n[1]['ManagementSalary'])]
    
    
    features=['Department','ClusteringCoefficient','Degree','DegreeCentrality','ClosenessCentrality',
             'BetweennessCentrality','PageRank']
    
    X_train=df.loc[~pd.isnull(df['HasManagementSalary']), features]
    y_train = df.loc[~pd.isnull(df['HasManagementSalary']), ['HasManagementSalary']]
    X_test=df.loc[(pd.isnull(df['HasManagementSalary'])), features]
    
    classifier = MLPClassifier(hidden_layer_sizes=[10,5],solver='lbfgs',alpha=10)
    classifier.fit(X_train,y_train)
    
    y_predicted=classifier.predict_proba(X_test)[:, 1]
    return pd.Series(y_predicted,X_test.index)# Your Answer Here


# In[20]:


salary_predictions()


# ### Part 2B - New Connections Prediction
# 
# For the last part of this assignment, you will predict future connections between employees of the network. The future connections information has been loaded into the variable `future_connections`. The index is a tuple indicating a pair of nodes that currently do not have a connection, and the `Future Connection` column indicates if an edge between those two nodes will exist in the future, where a value of 1.0 indicates a future connection.

# In[4]:


future_connections = pd.read_csv('Future_Connections.csv', index_col=0, converters={0: eval})
future_connections.head(10)


# Using network `G` and `future_connections`, identify the edges in `future_connections` with missing values and predict whether or not these edges will have a future connection.
# 
# To accomplish this, you will need to create a matrix of features for the edges found in `future_connections` using networkx, train a sklearn classifier on those edges in `future_connections` that have `Future Connection` data, and predict a probability of the edge being a future connection for those edges in `future_connections` where `Future Connection` is missing.
# 
# 
# 
# Your predictions will need to be given as the probability of the corresponding edge being a future connection.
# 
# The evaluation metric for this assignment is the Area Under the ROC Curve (AUC).
# 
# Your grade will be based on the AUC score computed for your classifier. A model which with an AUC of 0.88 or higher will receive full points, and with an AUC of 0.82 or higher will pass (get 80% of the full points).
# 
# Using your trained classifier, return a series of length 122112 with the data being the probability of the edge being a future connection, and the index being the edge as represented by a tuple of nodes.
# 
#     Example:
#     
#         (107, 348)    0.35
#         (542, 751)    0.40
#         (20, 426)     0.55
#         (50, 989)     0.35
#                   ...
#         (939, 940)    0.15
#         (555, 905)    0.35
#         (75, 101)     0.65
#         Length: 122112, dtype: float64

# In[20]:


def new_connections_predictions():
    
    # Your Code Here
    for n in G.nodes():
        G.node[n]['community']=G.node[n]['Department']
    #df = pd.DataFrame(index=[(x[0], x[1]) for x in list(nx.preferential_attachment(G))])
    future_connections['common_neighbors'] = [len(list(nx.common_neighbors(G,x[0],x[1]))) for x in future_connections.index]
    future_connections['jaccard_coefficient'] = [list(nx.jaccard_coefficient(G, [x]))[0][2] for x in future_connections.index]
    future_connections['resource_allocation_index'] = [list(nx.resource_allocation_index(G, [x]))[0][2] for x in future_connections.index]
    future_connections['adamic_adar_index'] = [list(nx.adamic_adar_index(G, [x]))[0][2] for x in future_connections.index]
    future_connections['preferential_attachment'] = [list(nx.preferential_attachment(G, [x]))[0][2] for x in future_connections.index]
    future_connections['cn_soundarajan_hopcroft'] = [list(nx.cn_soundarajan_hopcroft(G, [x]))[0][2] for x in future_connections.index]
    #future_connections['ra_soundarajan_hopcroft'] = [list(nx.ra_soundarajan_hopcroft(G, [x]))[0][2] for x in future_connections.index]
    future_connections['cn_soundarajan_hopcroft'] = future_connections['cn_soundarajan_hopcroft'].fillna(value=0)
    #future_connections['ra_soundarajan_hopcroft'] = df['cn_soundarajan_hopcroft'].fillna(value=0)
    #future_connections.join(df,how='outer')
    
    features = ['jaccard_coefficient','resource_allocation_index','adamic_adar_index',
                'preferential_attachment','cn_soundarajan_hopcroft']
    
    X_train=future_connections.loc[~pd.isnull(future_connections['Future Connection']), features]
    y_train = future_connections.loc[~pd.isnull(future_connections['Future Connection']), ['Future Connection']]
    X_test=future_connections.loc[(pd.isnull(future_connections['Future Connection'])), features]
    
    classifier = MLPClassifier(hidden_layer_sizes=[10,5],solver='lbfgs',alpha=10)
    classifier.fit(X_train,y_train)
    
    y_predicted=classifier.predict_proba(X_test)[:, 1]
    
    return pd.Series(y_predicted,X_test.index)# Your Answer Here


# In[22]:


new_connections_predictions()


# In[ ]:




